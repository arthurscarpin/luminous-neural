from typing import Type, TypeVar, Generic, List, Optional

from pydantic import BaseModel
from sqlalchemy.orm import Session
from app.core.sql_database import Base

T = TypeVar("T", bound=Base)
Schema = TypeVar("Schema", bound=BaseModel)


# --- Base Repository for CRUD ---
class BaseRepository(Generic[T, Schema]):
    """Generic repository providing CRUD operations for SQLAlchemy models using Pydantic Schemas.

    This repository enforces that all create and update operations use validated Pydantic Schemas,
    ensuring data consistency and type safety.

    Attributes:
        model (Type[T]): The SQLAlchemy model class this repository manages.
        session (Session): SQLAlchemy database session used for operations.
    """

    def __init__(self, model: Type[T], session: Session):
        """
        Initialize the repository with a SQLAlchemy model and database session.

        Args:
            model (Type[T]): The SQLAlchemy model class to be managed by this repository.
        """
        self.model = model
        self.session = session

    def create(self, obj_in: Schema) -> T:
        """
        Create a new record in the database using a Pydantic Schema.

        Args:
            obj_in (Schema): A Pydantic schema containing validated fields for the new record.

        Returns:
            T: The newly created SQLAlchemy model instance with updated database state (including autogenerated fields).
        """
        obj = self.model(**obj_in.model_dump())
        self.session.add(obj)
        self.session.commit()
        self.session.refresh(obj)
        return obj

    def get_all(self) -> List[T]:
        """
        Retrieve all records of the model from the database with status=True.

        Returns:
            List[T]: A list of all model instances where status is True.
        """
        query = self.session.query(self.model)
        if hasattr(self.model, 'status'):
            query = query.filter(getattr(self.model, 'status'))
        return query.all()

    def get_by_id(self, id: int) -> Optional[T]:
        """
        Retrieve a single record by its primary key.

        Args:
            id (int): The primary key of the record to retrieve.

        Returns:
            Optional[T]: The model instance if found; otherwise, None.
        """
        return self.session.query(self.model).filter(self.model.id == id).first()

    def update(self, obj: T, obj_in: BaseModel) -> T:
        """
        Update an existing record with values provided by a Pydantic Schema.

        Only fields explicitly set in the schema will be updated (`exclude_unset=True`).

        Args:
            obj (T): The SQLAlchemy model instance to update.
            obj_in (Schema): A Pydantic schema containing the fields to update.

        Returns:
            T: The updated SQLAlchemy model instance with refreshed database state.
        """
        for key, value in obj_in.model_dump(exclude_unset=True).items():
            setattr(obj, key, value)
        self.session.commit()
        self.session.refresh(obj)
        return obj

    def delete(self, obj: T) -> None:
        """
        Delete a record from the database.

        Args:
            obj (T): The SQLAlchemy model instance to delete.

        Returns:
            None
        """
        self.session.delete(obj)
        self.session.commit()
